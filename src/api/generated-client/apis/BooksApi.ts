/* tslint:disable */
/* eslint-disable */
/**
 * FakeRESTApi.Web V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Book } from "../models";
import { BookFromJSON, BookToJSON } from "../models";

export interface BooksApiApiV1BooksIdDeleteRequest {
  id: number;
}

export interface BooksApiApiV1BooksIdGetRequest {
  id: number;
}

export interface BooksApiApiV1BooksIdPutRequest {
  id: number;
  book?: Book;
}

export interface BooksApiApiV1BooksPostRequest {
  book?: Book;
}

/**
 *
 */
export class BooksApi extends runtime.BaseAPI {
  /**
   */
  async apiV1BooksGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Book>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/Books`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(BookFromJSON)
    );
  }

  /**
   */
  async apiV1BooksGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Book>> {
    const response = await this.apiV1BooksGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiV1BooksIdDeleteRaw(
    requestParameters: BooksApiApiV1BooksIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1BooksIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/Books/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiV1BooksIdDelete(
    requestParameters: BooksApiApiV1BooksIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1BooksIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiV1BooksIdGetRaw(
    requestParameters: BooksApiApiV1BooksIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Book>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1BooksIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/Books/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      BookFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1BooksIdGet(
    requestParameters: BooksApiApiV1BooksIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Book> {
    const response = await this.apiV1BooksIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiV1BooksIdPutRaw(
    requestParameters: BooksApiApiV1BooksIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1BooksIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; v=1.0";

    const response = await this.request(
      {
        path: `/api/v1/Books/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: BookToJSON(requestParameters.book),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiV1BooksIdPut(
    requestParameters: BooksApiApiV1BooksIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1BooksIdPutRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiV1BooksPostRaw(
    requestParameters: BooksApiApiV1BooksPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; v=1.0";

    const response = await this.request(
      {
        path: `/api/v1/Books`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: BookToJSON(requestParameters.book),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiV1BooksPost(
    requestParameters: BooksApiApiV1BooksPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1BooksPostRaw(requestParameters, initOverrides);
  }
}
