/* tslint:disable */
/* eslint-disable */
/**
 * FakeRESTApi.Web V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { Activity } from "../models";
import { ActivityFromJSON, ActivityToJSON } from "../models";

export interface ActivitiesApiApiV1ActivitiesIdDeleteRequest {
  id: number;
}

export interface ActivitiesApiApiV1ActivitiesIdGetRequest {
  id: number;
}

export interface ActivitiesApiApiV1ActivitiesIdPutRequest {
  id: number;
  activity?: Activity;
}

export interface ActivitiesApiApiV1ActivitiesPostRequest {
  activity?: Activity;
}

/**
 *
 */
export class ActivitiesApi extends runtime.BaseAPI {
  /**
   */
  async apiV1ActivitiesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Activity>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/Activities`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ActivityFromJSON)
    );
  }

  /**
   */
  async apiV1ActivitiesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Activity>> {
    const response = await this.apiV1ActivitiesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiV1ActivitiesIdDeleteRaw(
    requestParameters: ActivitiesApiApiV1ActivitiesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1ActivitiesIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/Activities/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiV1ActivitiesIdDelete(
    requestParameters: ActivitiesApiApiV1ActivitiesIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1ActivitiesIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiV1ActivitiesIdGetRaw(
    requestParameters: ActivitiesApiApiV1ActivitiesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Activity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1ActivitiesIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/Activities/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ActivityFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1ActivitiesIdGet(
    requestParameters: ActivitiesApiApiV1ActivitiesIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Activity> {
    const response = await this.apiV1ActivitiesIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiV1ActivitiesIdPutRaw(
    requestParameters: ActivitiesApiApiV1ActivitiesIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Activity>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1ActivitiesIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; v=1.0";

    const response = await this.request(
      {
        path: `/api/v1/Activities/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ActivityToJSON(requestParameters.activity),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ActivityFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1ActivitiesIdPut(
    requestParameters: ActivitiesApiApiV1ActivitiesIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Activity> {
    const response = await this.apiV1ActivitiesIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiV1ActivitiesPostRaw(
    requestParameters: ActivitiesApiApiV1ActivitiesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Activity>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; v=1.0";

    const response = await this.request(
      {
        path: `/api/v1/Activities`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ActivityToJSON(requestParameters.activity),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ActivityFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1ActivitiesPost(
    requestParameters: ActivitiesApiApiV1ActivitiesPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Activity> {
    const response = await this.apiV1ActivitiesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
