/* tslint:disable */
/* eslint-disable */
/**
 * FakeRESTApi.Web V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type { CoverPhoto } from "../models";
import { CoverPhotoFromJSON, CoverPhotoToJSON } from "../models";

export interface CoverPhotosApiApiV1CoverPhotosBooksCoversIdBookGetRequest {
  idBook: number;
}

export interface CoverPhotosApiApiV1CoverPhotosIdDeleteRequest {
  id: number;
}

export interface CoverPhotosApiApiV1CoverPhotosIdGetRequest {
  id: number;
}

export interface CoverPhotosApiApiV1CoverPhotosIdPutRequest {
  id: number;
  coverPhoto?: CoverPhoto;
}

export interface CoverPhotosApiApiV1CoverPhotosPostRequest {
  coverPhoto?: CoverPhoto;
}

/**
 *
 */
export class CoverPhotosApi extends runtime.BaseAPI {
  /**
   */
  async apiV1CoverPhotosBooksCoversIdBookGetRaw(
    requestParameters: CoverPhotosApiApiV1CoverPhotosBooksCoversIdBookGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<CoverPhoto>>> {
    if (
      requestParameters.idBook === null ||
      requestParameters.idBook === undefined
    ) {
      throw new runtime.RequiredError(
        "idBook",
        "Required parameter requestParameters.idBook was null or undefined when calling apiV1CoverPhotosBooksCoversIdBookGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/CoverPhotos/books/covers/{idBook}`.replace(
          `{${"idBook"}}`,
          encodeURIComponent(String(requestParameters.idBook))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CoverPhotoFromJSON)
    );
  }

  /**
   */
  async apiV1CoverPhotosBooksCoversIdBookGet(
    requestParameters: CoverPhotosApiApiV1CoverPhotosBooksCoversIdBookGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<CoverPhoto>> {
    const response = await this.apiV1CoverPhotosBooksCoversIdBookGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiV1CoverPhotosGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<CoverPhoto>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/CoverPhotos`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(CoverPhotoFromJSON)
    );
  }

  /**
   */
  async apiV1CoverPhotosGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<CoverPhoto>> {
    const response = await this.apiV1CoverPhotosGetRaw(initOverrides);
    return await response.value();
  }

  /**
   */
  async apiV1CoverPhotosIdDeleteRaw(
    requestParameters: CoverPhotosApiApiV1CoverPhotosIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1CoverPhotosIdDelete."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/CoverPhotos/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async apiV1CoverPhotosIdDelete(
    requestParameters: CoverPhotosApiApiV1CoverPhotosIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.apiV1CoverPhotosIdDeleteRaw(requestParameters, initOverrides);
  }

  /**
   */
  async apiV1CoverPhotosIdGetRaw(
    requestParameters: CoverPhotosApiApiV1CoverPhotosIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CoverPhoto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1CoverPhotosIdGet."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/api/v1/CoverPhotos/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CoverPhotoFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1CoverPhotosIdGet(
    requestParameters: CoverPhotosApiApiV1CoverPhotosIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CoverPhoto> {
    const response = await this.apiV1CoverPhotosIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiV1CoverPhotosIdPutRaw(
    requestParameters: CoverPhotosApiApiV1CoverPhotosIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CoverPhoto>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling apiV1CoverPhotosIdPut."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; v=1.0";

    const response = await this.request(
      {
        path: `/api/v1/CoverPhotos/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: CoverPhotoToJSON(requestParameters.coverPhoto),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CoverPhotoFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1CoverPhotosIdPut(
    requestParameters: CoverPhotosApiApiV1CoverPhotosIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CoverPhoto> {
    const response = await this.apiV1CoverPhotosIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   */
  async apiV1CoverPhotosPostRaw(
    requestParameters: CoverPhotosApiApiV1CoverPhotosPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<CoverPhoto>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json; v=1.0";

    const response = await this.request(
      {
        path: `/api/v1/CoverPhotos`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CoverPhotoToJSON(requestParameters.coverPhoto),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      CoverPhotoFromJSON(jsonValue)
    );
  }

  /**
   */
  async apiV1CoverPhotosPost(
    requestParameters: CoverPhotosApiApiV1CoverPhotosPostRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<CoverPhoto> {
    const response = await this.apiV1CoverPhotosPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
